using System.Collections.Generic;
using System.IO;

namespace Protobuf
{
    class ExportLuaProtobuf : BaseProtobuf
	{
		private string WriteFilePath => ConstConfig.GetValue(PathType.GetExportProtobufDir);
       

        public override void WriteFile()
		{
			List<string> lines = new List<string>();
			string saveFileName = this.fileName + "_pb";//保存的文件名
			lines.Add("-- Auto generated By Tools");//描述信息
			lines.Add("local protobuf = require \"protobuf/protobuf\"");
			string shortDirPah = WriteFilePath.Replace(Path.GetDirectoryName(Path.GetDirectoryName(WriteFilePath)) + "\\", "").Replace("\\", "/");
			foreach (var item in exportBuff)//导入
			{
				string itemName = $"{item}_pb";
				lines.Add($"local {itemName.ToUpper()} = require(\"{shortDirPah}/{itemName}\")");
			}
			lines.Add($"module('{saveFileName}')");
			lines.Add("");

			List<string> local = new List<string>();//类和字段声明
			List<string> localDescript = new List<string>();//字段描述
			List<string> classMessage = new List<string>();//类消息
			List<string> enumMessage = new List<string>();//枚举消息

			classMessage.Add("");
			localDescript.Add("");

			int length = luaProtobufs.Count;
			for (int i = 0; i < length; i++)
			{
				if (luaProtobufs[i].isEnum)//枚举信息
					local.Add($"local {luaProtobufs[i].className.ToUpper()} = protobuf.EnumDescriptor();");
				else
					local.Add($"{luaProtobufs[i].className.ToUpper()} = protobuf.Descriptor();");

				//类成员字段集合
				string members = string.Empty;
				/*************************************类成员添加部分*********************************************/
				int count = luaProtobufs[i].members.Count;
				for (int j = 0; j < count; j++)
				{
					var data = luaProtobufs[i].members[j];
					if (luaProtobufs[i].isEnum)//枚举信息
					{
						string fieldName = $"{luaProtobufs[i].className.ToUpper()}_{data.name.ToUpper()}_ENUM";
						local.Add($"local {fieldName} = protobuf.EnumValueDescriptor();");
						members += fieldName + ",";
						localDescript.Add($"{fieldName}.name = \"{data.name}\"");
						localDescript.Add($"{fieldName}.number = {data.number}");
						localDescript.Add($"{fieldName}.index = {data.number}");
						enumMessage.Add($"{data.name.ToUpper()} = {data.number}");
					}
					else
					{
						string fieldName = $"{luaProtobufs[i].className.ToUpper()}_{data.name.ToUpper()}_FIELD";
						local.Add($"local {fieldName} = protobuf.FieldDescriptor();");
						members += fieldName + ",";

						localDescript.Add($"{fieldName}.name = \"{data.name}\"");
						localDescript.Add($"{fieldName}.full_name = \".{data.full_name}\"");
						localDescript.Add($"{fieldName}.number = {data.number}");
						localDescript.Add($"{fieldName}.index = {data.index}");
						localDescript.Add($"{fieldName}.label = {data.label}");
						localDescript.Add($"{fieldName}.has_default_value = {data.has_default_value.ToString().ToLower()}");
						localDescript.Add($"{fieldName}.default_value = {data.Getdefault_value()}");
						if (data.isMessage)
							localDescript.Add($"{fieldName}.message_type = {data.typeName.ToUpper()}");
						localDescript.Add($"{fieldName}.type = {data.type}");
						localDescript.Add($"{fieldName}.cpp_type = {data.cpp_type}");
						localDescript.Add("");
					}
				}

				/*************************************类添加部分*********************************************/
				if (luaProtobufs[i].isEnum)//枚举信息
				{
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.name = \"{luaProtobufs[i].className}\"");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.full_name = \".{this.packageName}.{luaProtobufs[i].className}\"");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.values = " + "{" + members.TrimEnd(',') + "}");
				}
				else
				{
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.name = \"{luaProtobufs[i].className}\"");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.full_name = \".{this.packageName}.{luaProtobufs[i].className}\"");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.nested_types = " + "{}");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.enum_types = " + "{}");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.fields = " + "{" + members.TrimEnd(',') + "}");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.is_extendable = false");
					localDescript.Add($"{luaProtobufs[i].className.ToUpper()}.extensions = " + "{}");
					classMessage.Add($"{luaProtobufs[i].className} = protobuf.Message({luaProtobufs[i].className.ToUpper()})");
				}
			}

			lines.AddRange(local);
			lines.AddRange(localDescript);
			lines.AddRange(classMessage);
			lines.AddRange(enumMessage);

			//写入文件
			string filePath = Path.Combine(WriteFilePath, saveFileName + ".lua");
			File.WriteAllLines(filePath, lines.ToArray());
			
		}

		static List<string> bufCode = new List<string>();
		public override void CreateBufCode()
		{
			int length = luaProtobufs.Count;
			List<string> lines = new List<string>();
			lines.Add("---Generated By Hukiry-lua Do not Edit");//描述信息
			lines.Add("---协议号");
			lines.Add("---@class protocal");
			lines.Add("protocal = {");
			for (int i = 0; i < length; i++)
			{
				string[] array = luaProtobufs[i].className.Split('_');
				if (array.Length == 2 && int.TryParse(array[1], out int result))
				{
					bufCode.Add($"	---{luaProtobufs[i].desc}");
					bufCode.Add($"	{luaProtobufs[i].className} = {result},");
				}
			}
			lines.AddRange(bufCode);
			lines.Add("}");
			string filePath = Path.Combine(WriteFilePath.Replace('\\', '/'), "protocal.lua");
			File.WriteAllLines(filePath, lines.ToArray());
		}
	}
}
