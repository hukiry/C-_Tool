using System;
using System.Collections.Generic;
using System.IO;

namespace Protobuf
{

    class ExportLuaBinary : BaseProtobuf
	{
		private Dictionary<string, int> protobuf_type = new Dictionary<string, int>() {
			{ "byte",1},{ "int16",2},{ "int32",3},{ "int64",4},{ "float",5},
			{ "double",6},{ "bool",7},{ "char",8},{ "string",9},{ "message",10},
			{ "uint16",11},{ "uint32",12},{ "uint64",13}
		};

		private Dictionary<string, object> protobuf_DefaultValue = new Dictionary<string, object>() {
			{ "byte",0},{ "int16",0},{ "int32",0},{ "int64",0},{ "float",0},
			{ "double",0},{ "bool","false"},{ "char","''"},{ "string","\"\""},{ "message","{}"},
			{ "uint16",0},{ "uint32",0},{ "uint64",0}
		};
		private string WriteFilePath => ConstConfig.GetValue(PathType.GetExportBinaryDir);
		public override void WriteFile()
		{
			List<string> lines = new List<string>();
			string saveFileName = this.fileName + "_pb";//保存的文件名
	
			lines.Add("---Generated By Hukiry-lua Do not Edit");//描述信息
			List<string> classFields = new List<string>();//类生成
			List<string> classMessage = new List<string>();//类消息

			classMessage.Add("");
			int length = luaProtobufs.Count;
			for (int i = 0; i < length; i++)
			{
				classFields.Add("");
				//类成员字段集合
				string classNameUpper = luaProtobufs[i].className.ToUpper();
				classFields.Add($"{luaProtobufs[i].desc}");
				classFields.Add($"---@class {classNameUpper}");
				classFields.Add($"local {classNameUpper} = "+"{}");
				string fields = string.Empty;
				string fieldType = string.Empty;
				string fieldTag = string.Empty;
				List<string> tempFields = new List<string>();
				/*************************************类成员添加部分*********************************************/
				int count = luaProtobufs[i].members.Count;
				for (int j = 0; j < count; j++)
				{
					if (luaProtobufs[i].isEnum) continue;
					var data = luaProtobufs[i].members[j];
					int isrepeated = data.labelName.ToLower().Equals("repeated") ? 1 : 0;
					fieldTag += $"{isrepeated},";

					
					fields += $"\"{data.name}\",";
					if (protobuf_type.ContainsKey(data.typeName.ToLower()))
					{
						fieldType += $"{protobuf_type[data.typeName.ToLower()]},";
					}
					else
					{
						fieldType += $"10,";
					}


					if(!string.IsNullOrEmpty(data.desc))
						tempFields.Add($"	---{data.desc}");

					if (isrepeated == 1)
					{
						bool isMessage = false;
						if (!protobuf_DefaultValue.ContainsKey(data.typeName.ToLower()))
						{
							tempFields.Add($"	---@private");
							tempFields.Add($"	self.{data.name}_Message = protobuf.Message({data.typeName.ToUpper()})");
							isMessage = true;
						}
						string reslutStr = isMessage ? data.typeName.ToUpper() : "number";
						tempFields.Add($"	---@type table<number,{reslutStr}>");
						tempFields.Add($"	self.{data.name} = " + "{}");
					}
					else
					{
						if (protobuf_DefaultValue.ContainsKey(data.typeName.ToLower()))
							tempFields.Add($"	self.{data.name} = {protobuf_DefaultValue[data.typeName.ToLower()]}");
						else
						{
							tempFields.Add($"	---@private");
							tempFields.Add($"	self.{data.name}_Message = protobuf.Message({data.typeName.ToUpper()})");
							tempFields.Add($"	---@type {data.typeName.ToUpper()}");
							tempFields.Add($"	self.{data.name} = nil");
						}
					}	
				}
				
				classFields.Add($"---@private");
				classFields.Add($"{classNameUpper}.fields = " + "{" + fields.TrimEnd(',') + "}");
				classFields.Add($"---@private");
				classFields.Add($"{classNameUpper}.fieldType = " + "{" + fieldType.TrimEnd(',') + "}");
				classFields.Add($"---@private");
				classFields.Add($"{classNameUpper}.fieldTag = " + "{" + fieldTag.TrimEnd(',') + "}");
				if (tempFields.Count > 0)
				{
					classFields.Add($"function {classNameUpper}:_ctor()");
					classFields.AddRange(tempFields);
					classFields.Add("end");
				}
			
				/*************************************类添加部分*********************************************/
				//classMessage.Add($"---@type {classNameUpper}");
				classMessage.Add($"{luaProtobufs[i].className} = protobuf.Message({classNameUpper})");
			}

			lines.AddRange(classFields);
			lines.AddRange(classMessage);
			//写入文件
			string filePath = Path.Combine(WriteFilePath.Replace('\\','/'), saveFileName + ".lua");
			File.WriteAllLines(filePath, lines.ToArray());
		}

		static List<string> bufCode = new List<string>();
		public override void CreateBufCode()
		{
			int length = luaProtobufs.Count;
			List<string> lines = new List<string>();
			lines.Add("---Generated By Hukiry-lua Do not Edit");//描述信息
			lines.Add("---协议号");
			lines.Add("---@class protocal");
			lines.Add("protocal = {");
			for (int i = 0; i < length; i++)
			{
				string[] array = luaProtobufs[i].className.Split('_');
				if (array.Length == 2 && int.TryParse(array[1], out int result))
				{
					bufCode.Add($"	{luaProtobufs[i].desc}");
					bufCode.Add($"	{luaProtobufs[i].className.ToUpper()} = {result},");
				}
			}
			lines.AddRange(bufCode);
			lines.Add("}");
			string filePath = Path.Combine(WriteFilePath.Replace('\\', '/'), "protocal.lua");
			File.WriteAllLines(filePath, lines.ToArray());
		}
    }
}
