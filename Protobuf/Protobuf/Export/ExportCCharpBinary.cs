using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Protobuf
{
    public class cmd_info {
		public string cmd;
		public string desc;
	}

	class ExportCCharpBinary : BaseProtobuf
	{
		//c#类型对应
		protected Dictionary<string, string> protobuf_type = new Dictionary<string, string>() {
			{ "byte","byte"},{ "int16","short"},{ "int32","int"},{ "int64","long"},{ "float","float"},
			{ "double","double"},{ "bool","bool"},{ "char","char"},{ "string","string"},
			{ "int","int"},{ "long","long"},{ "short","short"},
			{ "uint16","ushort"},{ "uint32","uint"},{ "uint64","ulong"}
		};

		//c#导出的类型方法对应
		protected Dictionary<string, string> protobuf_dic = new Dictionary<string, string>() {
			{ "byte","Byte"},{ "int16","Int16"},{ "int32","Int32"},{ "int64","Int64"},{ "float","Float"},
			{ "double","Double"},{ "bool","Boolean"},{ "char","Char"},{ "string","String"},
			{ "uint16","UInt16"},{ "uint32","UInt32"},{ "uint64","UInt64"}
		};

		//c#默认值对应
		protected Dictionary<string, object> protobuf_DefaultValue = new Dictionary<string, object>() {
			{ "byte",0},{ "int16",0},{ "int32",0},{ "int64",0},{ "float",0},
			{ "double",0},{ "bool","false"},{ "char","''"},{ "string","string.Empty"},
			{ "uint16",0},{ "uint32",0},{ "uint64",0}
		};

		protected string WriteFilePath => ConstConfig.GetValue(PathType.GetExportBinaryDir);

		protected string WriteSubDirPath => ConstConfig.GetValue(PathType.GetExportBinarySubDir);
		protected bool isHttpBinary = false;

		public ExportCCharpBinary(){}

		public ExportCCharpBinary(bool ishttp)
		{
			this.isHttpBinary = ishttp;
		}

		/// <summary>
		/// 
		/// </summary>
		public override void WriteFile()
		{
			Dictionary<string, cmd_info> cmdList = new Dictionary<string, cmd_info>();
			List<string> cmdFields = new List<string>();
			List<string> cmdFieldNames = new List<string>();
			List<string> lines = new List<string>();
			string saveFileName = this.fileName + "_pb";//保存的文件名
			lines.Add("/*Generated By Hukiry-lua Do not Edit*/");//描述信息
			if (this.isHttpBinary)
			{
				lines.Add("using Hukiry.Protobuf;");
				lines.Add("using System.Collections.Generic;");
				lines.Add("using TouchSocket.Core.ByteManager;");
				lines.Add("namespace Game.Http {");
			}
			else
			{
				lines.Add("using TouchSocket.Core.ByteManager;");
				lines.Add("using System.Collections.Generic;");
				lines.Add("namespace Hukiry.Protobuf {");
			}

			
			int length = luaProtobufs.Count;
			for (int i = 0; i < length; i++)//类遍历
			{
				//类成员字段集合
				string classNameUpper = luaProtobufs[i].className;
				if (classNameUpper.Split('_').Length == 2)
				{
					string cmd = classNameUpper.Split('_')[1];
					if (!cmdList.ContainsKey(cmd)) cmdList[cmd]=new cmd_info (){cmd=cmd,desc = luaProtobufs[i].desc };
				}
				List<string> tempFields = new List<string>();
				List<string> classWrite = new List<string>();//写方法
				List<string> classRead = new List<string>();//读方法
				/*************************************类成员添加部分*********************************************/

				//添加类名
				lines.Add("	/// <summary>");
				lines.Add($"	/// {luaProtobufs[i].desc}");
				lines.Add("	/// </summary>");
				lines.Add($"	public class {classNameUpper} : IProto");
				lines.Add("	{");
				int count = luaProtobufs[i].members.Count;
				for (int j = 0; j < count; j++)
				{
					if (luaProtobufs[i].isEnum) continue;
					var data = luaProtobufs[i].members[j];
					bool islist = data.labelName.ToLower().Equals("repeated");
					string typeName = protobuf_type.ContainsKey(data.typeName.ToLower()) ? protobuf_type[data.typeName.ToLower()] : data.typeName;

					tempFields.Add("		/// <summary>");
					tempFields.Add($"		/// {data.desc}");
					tempFields.Add("		/// </summary>");
					if (!string.IsNullOrEmpty(data.dataTag))
					{
						cmdFields.Add("		/// <summary>");
						cmdFields.Add($"		/// {data.desc}");
						cmdFields.Add("		/// </summary>");
					}


					if (!string.IsNullOrEmpty(data.dataTag))
					{
						cmdFieldNames.Add(typeName + "|" + data.name + "|" + islist);
					}

					if (islist)
					{
						if (protobuf_type.ContainsKey(data.typeName.ToLower()))
						{
							if (!string.IsNullOrEmpty(data.dataTag)) cmdFields.Add($"		public string {data.name} = string.Empty;");
							tempFields.Add($"		public List<{typeName}> {data.name} = new List<{typeName}>();");
							classWrite.Add($"			block.Write((ushort)this.{data.name}.Count);");
							classWrite.Add($"			for (int i = 0; i < this.{data.name}.Count; i++)");
							classWrite.Add($"				block.Write(this.{data.name}[i]);");

							classRead.Add($"			int len{data.name} = block.ReadInt16();");
							classRead.Add($"			for (int i = 0; i < len{data.name}; i++)");
							if (data.typeName.ToLower().Equals("byte"))
								classRead.Add($"				this.{data.name}.Add((byte)block.Read{protobuf_dic[data.typeName.ToLower()]}());");
							else
								classRead.Add($"				this.{data.name}.Add(block.Read{protobuf_dic[data.typeName.ToLower()]}());");
						}
						else
						{
							if (!string.IsNullOrEmpty(data.dataTag)) cmdFields.Add($"		public string {data.name} = string.Empty;");

							tempFields.Add($"		public List<{typeName}> {data.name} = new List<{typeName}>();");
							classWrite.Add($"			block.WriteClassList(this.{data.name});");
							classRead.Add($"			block.ReadClassList(this.{data.name});");
						}
					}
					else
					{

						if (protobuf_type.ContainsKey(data.typeName.ToLower()))
						{
							if (!string.IsNullOrEmpty(data.dataTag)) cmdFields.Add($"		public {typeName} {data.name} = {protobuf_DefaultValue[data.typeName.ToLower()]};");
							tempFields.Add($"		public {typeName} {data.name} = {protobuf_DefaultValue[data.typeName.ToLower()]};");
							classWrite.Add($"			block.Write(this.{data.name});");
							if (data.typeName.ToLower().Equals("byte"))
								classRead.Add($"			this.{data.name} = (byte)block.Read{protobuf_dic[data.typeName.ToLower()]}();");
							else
								classRead.Add($"			this.{data.name} = block.Read{protobuf_dic[data.typeName.ToLower()]}();");
						}
						else
						{
							if (!string.IsNullOrEmpty(data.dataTag)) cmdFields.Add($"		public string {data.name} = string.Empty;");
							tempFields.Add($"		public {typeName} {data.name} = new {typeName}();");
							classWrite.Add($"			this.{data.name}.Write(block);");
							classRead.Add($"			this.{data.name}.Read(block);");
						}
					}
				}

				lines.AddRange(tempFields);
				lines.Add("");
				lines.Add("		public void Write(ByteBlock block)");
				lines.Add("		{");
				lines.AddRange(classWrite);
				lines.Add("		}");
				lines.Add("");
				lines.Add("		public void Read(ByteBlock block)");
				lines.Add("		{");
				lines.AddRange(classRead);
				lines.Add("		}");
				lines.Add("	}");
				lines.Add("");
			}
			lines.Add("}");
			//写入文件
			string filePath = Path.Combine(WriteFilePath.Replace('\\', '/'), saveFileName + ".cs");
			File.WriteAllLines(filePath, lines.ToArray());

			if (Directory.Exists(WriteSubDirPath))
			{
				if (!this.isHttpBinary)
				{
					this.CreatePBData(cmdFields, cmdFieldNames);
				}
				this.CreatePBMessage(cmdList.Values.ToList()) ;
			}
			else
			{
				Console.WriteLine("目录不存在：" + WriteSubDirPath);
			}
		}

		static List<string> bufCode = new List<string>();
		public override void CreateBufCode()
		{
			int length = luaProtobufs.Count;
			List<string> lines = new List<string>();
			lines.Add("/*Generated By Hukiry-c# Do not Edit*/");//描述信息
			lines.Add("using System;");
			lines.Add("namespace Hukiry.Protobuf {");
			lines.Add("	public sealed class protocal {");
			for (int i = 0; i < length; i++)
			{
				string[] array = luaProtobufs[i].className.Split('_');
				if (array.Length == 2 && int.TryParse(array[1], out int result))
				{
					bufCode.Add("		/// <summary>");
					bufCode.Add($"		///{luaProtobufs[i].desc}");
					bufCode.Add("		/// <summary>");
					bufCode.Add($"		public const int {luaProtobufs[i].className} = {result};");
				}
			}
			lines.AddRange(bufCode);
			lines.Add("		/// <summary>");
			lines.Add("		/// 获取协议号");
			lines.Add("		/// <summary>");
			lines.Add("		public (int dot, int tip) GetProtoCode(int pbCode) {");
			lines.Add("			return (pbCode / 100, pbCode % 100);");
			lines.Add("		}");
			lines.Add("	}");
			lines.Add("}");
			string filePath = Path.Combine(WriteFilePath.Replace('\\', '/'), "protocal.cs");
			File.WriteAllLines(filePath, lines.ToArray());
		}

		#region 创建消息和数据结构
		protected const string method_Template = @"
		bool receive_{PROTO_CMD}(IProto proto)//接收客户端数据
		{
			msg_{PROTO_CMD} msg = proto as msg_{PROTO_CMD};
			this.data = new {PROTO_CLASS}_Data()
			{
                
			};
			//this.data.UpdateSqlData();//更新数据到表中
			return true;
		}

		IProto send_{PROTO_CMD}()//发送给客户端数据
		{
			IProto msg = new msg_{PROTO_CMD}()
			{
			};
			return msg;
		}";

		protected const string pbData_Mothod = @"
		{MEMEBER_FIELD}
		/// <summary>
        /// 首条协议的数据读取
        /// </summary>
		public override void ChildReadData({CLASS_NAME} data)
        {
{MOTHED_BODY_FIELD}
		}

        public override void ChildCreateData()
        {
			this.UpdateSqlData();
		}";

		/// <summary>
		/// 创建消息pb
		/// </summary>
		/// <param name="cmdList"></param>
		public virtual void CreatePBMessage(List<cmd_info> cmdList)
        {
			const string PROTO_CLASS = "{PROTO_CLASS}";
			const string PROTO_Method = "{PROTO_Method}";
			const string PROTO_CMD = "{PROTO_CMD}";
			string className = this.fileName.Split('_')[0];
			string saveClassName = $"{className}_message_Pb.cs";
			string fileTemplate = "Template/ServerTemplate.cs";
			if (File.Exists(fileTemplate))
			{
				string methodText = string.Empty;
				string text = File.ReadAllText(fileTemplate);
                for (int i = 0; i < cmdList.Count; i++)
                {
					if (i == 0)
					{
						methodText = $"private {className}_Data data;";
					}
					methodText += method_Template.Replace(PROTO_CLASS, className).Replace(PROTO_CMD, cmdList[i].cmd);
				}
				text = text.Replace(PROTO_CLASS, className).Replace(PROTO_Method, methodText);
				//创建目录
				string writeDir = WriteSubDirPath.Replace('\\', '/') + "/" + className;
				if (!Directory.Exists(writeDir)) Directory.CreateDirectory(writeDir);

				string filePath = Path.Combine(writeDir, saveClassName);
				if (!File.Exists(filePath))
				{
					File.WriteAllText(filePath, text);
				}
			}
			else
			{
				Console.WriteLine("文件模板不存在："+fileTemplate);
			}
		}

		/// <summary>
		/// 创建消息数据
		/// </summary>
		/// <param name="cmdFields"></param>
		/// <param name="cmdFieldNames"></param>
		private void CreatePBData(List<string> cmdFields, List<string> cmdFieldNames)
        {
			string className = this.fileName.Split('_')[0];
			string saveClassName = $"{className}_Data.cs";
			List<string> lines = new List<string>();
			lines.Add("using Hukiry.Protobuf;");
			lines.Add("using System.Collections.Generic;");
			lines.Add("namespace GameServer.TcpServer");
			lines.Add("{");
			lines.Add($"	public class {className}_Data:EntityBase<{className}_Data>");
			lines.Add("	{");
			lines.AddRange(cmdFields);

			(string readMothedData,string memberField,string class_name) = (string.Empty,string.Empty, $"{className}_Data");

			int len = cmdFieldNames.Count;
            for (int i = 0; i < len; i++)
            {
				string[] array = cmdFieldNames[i].Split('|');// 0=类型 1=名称 2=是集合
                readMothedData += $"			this.{array[1]} = data.{array[1]};\n";


                if (array[2].ToLower().Equals("true"))//集合结构
				{
					memberField += $"public List<{array[0]}> {array[1]} = new List<{array[0]}>();\n		";

				}
				else if(!protobuf_type.ContainsKey(array[0].ToLower()))//类型结构
				{
					memberField += $"public {array[0]} {array[1]} = new {array[0]}();\n";
				}

			}

			string replaceData = pbData_Mothod.Replace("{MOTHED_BODY_FIELD}", readMothedData)
				.Replace("{MEMEBER_FIELD}", memberField)
				.Replace("{CLASS_NAME}", class_name);
			lines.Add(replaceData);
			lines.Add("	}");
			lines.Add("}");
			//创建目录
			string writeDir = WriteSubDirPath.Replace('\\', '/') + "/" + className;
			if (!Directory.Exists(writeDir)) Directory.CreateDirectory(writeDir);

			string filePath = Path.Combine(writeDir, saveClassName);
			if (!File.Exists(filePath))
			{
				File.WriteAllLines(filePath, lines.ToArray());
			}
		} 
        #endregion
    }
}