


字段类型声明：
byte =1,
int16 = 2,
int32 = 3,
int64 = 4,
float = 5,
double = 6,
bool = 7,
char = 8,
string = 9,
message = 10

重复和可选声明
repeated
required

类名声明
message tos_1001
message toc_1001





生成的协议模板 (嵌套类)
---@class EXAMPLE
local PEOPLE = {}
PEOPLE.fields = {"name", "age"} 字段名称
PEOPLE.fieldType = {9, 3} 写入和读取的数据类型
PEOPLE.fieldTag = {0, 0} --1=数组，0= 默认
function PEOPLE:_ctor()
	---名称
	self.name = ''
	self.age = 0
end
people =  protobuf.Message(PEOPLE)

生成的协议模板
---@class EXAMPLE
local EXAMPLE = {}
EXAMPLE.fields = {"name", "people", "age", 'sizes' }
EXAMPLE.fieldType = {9, 10, 3, 3 }
EXAMPLE.fieldTag = {0, 1, 0, 1 }
function EXAMPLE:_ctor()
	---名称
	self.name = ''
	---id
	self.people_Message = protobuf.Message(PEOPLE)
	self.people = {}
	---等级
	self.age = 0
	---大小
	self.sizes = {}
end
---@type EXAMPLE
example = protobuf.Message(EXAMPLE)

生成的空协议模板
---@class EXAMPLE
local EXAMPLE = {}
EXAMPLE.fields = {}
EXAMPLE.fieldType = {}
---@type EXAMPLE
example = protobuf.Message(EXAMPLE)


协议解析
	local exm = example()
	exm:ParseFromString(msg)
	print(exm.name,exm.id, exm.lv,exm.size)
    
协议发送 
	exm = example()
    exm.name = "0909"
    exm.id = 12
    exm.age = 18
    exm.size = 1
	NetworkUtil.StartMsg( exm:SerializeToString())



生成实例
protobuf.Message = function(message_meta)
	local _member = {}
	_member.__call = function()
        if message_meta._ctor then
		    message_meta:_ctor()
	    end
		return setmetatable({}, {__index = message_meta})
	end

	---解析读取数据
	message_meta.ParseFromString = function(self, pb)
		if #self.fields > 0 then
			for i, v in ipairs(self.fields) do
				if message_meta.fieldTag[i] == 1 then
					local len = protobuf.read(pb, protobuf_type.int16)
					for _ = 1, len do
						if message_meta.fieldType[i] == protobuf_type.message then
                            local _Message = self[v.."_Message"]()
                            _Message:ParseFromString(pb)
                            table.insert(self[v], _Message)
						else
                            table.insert(self[v], protobuf.read(pb, message_meta.fieldType[i]))
						end
					end
				else
					if message_meta.fieldType[i] == protobuf_type.message then
                       local _Message = self[v.."_Message"]()
                       _Message:ParseFromString(pb)
						self[v] = _Message
					else
						self[v] = protobuf.read(pb, message_meta.fieldType[i])
					end
				end
			end
		end
	end

	---序列化字符串，发送
	message_meta.SerializeToString = function(self, pb)
		if pb == nil then
			pb = TouchSocket.Core.ByteManager.ByteBlock.New(1024*10, true)
		end

		if #self.fields > 0 then
			for i, v in ipairs(self.fields) do
				if message_meta.fieldTag[i] == 1 then
                    local len = #self[v]
					protobuf.write(pb, len, protobuf_type.int16)
					for k = 1, len do
						if message_meta.fieldType[i] == protobuf_type.message then
							self[v][k]:SerializeToString(pb)
						else
							protobuf.write(pb, self[v][k], message_meta.fieldType[i])
						end
					end
				else
					if message_meta.fieldType[i] == protobuf_type.message then
                        if self[v] == nil then
                            self[v]=self[v.."_Message"]()
                        end
						self[v]:SerializeToString(pb)
					else
						protobuf.write(pb, self[v], message_meta.fieldType[i])
					end
				end
			end
		end
		return pb
	end

	_member.__index = _member
	return setmetatable({}, _member)
end


        public class people : IProtobuf
        {
            public string name;
            public List<subPeople> info = new List<subPeople>();
            public int age;
            public List<int> sizes = new List<int>();

            public void Write(ByteBlock block)
            {
                block.Write(this.name);
                block.WriteClassList(info);
                block.Write(this.age);

                block.Write((ushort)this.sizes.Count);
                for (int i = 0; i < this.sizes.Count; i++)
                    block.Write(this.sizes[i]);
            }

            public void Read(ByteBlock block)
            {
                this.name = block.ReadString();
                block.ReadClassList(info);
                this.age = block.ReadInt32();

                int len = block.ReadInt16();
                for (int i = 0; i < len; i++)
                    this.sizes.Add(block.ReadInt32());
            }

            public override string ToString()
            {
                return $"name={this.name},,age={this.age}";
            }
        }