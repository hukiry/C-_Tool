
-------------------------------------------SQL 数据
// 协议定义和反射类型
ProtoType
{
    None = 1,// 默认保存到数据库：-------------------------保存数字
    Text = 2,// 用来定义文本数据的长度:VARCHAR-------------保存字符串
    FullText = 4,// 用来定义文本数据的长度:TEXT------------保存字符串
    PrimaryKey = 8,// 声明字段为唯一键
    SqlTable = 16,// 是将此类生成为表，字段和协议无效：新建立表
    Client = 32,// 客户端协议定义发来的数据:每次需要更新------保存数字或字符串
    Server = 64,// 服务器协议定义响应的数据
    Custome = 128,// 自定义字段声明：每次需要更新  -----------保存数字或字符串
    Json = 256,//保存并转化为Json -----------保存字符串
    Update = 512,//每次需要更新
}

#[TextLength(ProtoType.PrimaryKey)] 标记到类和字段上
#[TextLength(ProtoType.None)]


--------------------------------------------MONOGO
数据类型
byte = 1字节
int16 = 2字节
int32 = 4字节
int64 = 8字节
float = 4字节
double = 8字节
bool = 1字节
char = 8位字节
string = 字符串字节
message = 嵌套数据结构,
uint16 = 无符号2字节,
uint32 = 无符号4字节,
uint64 = 无符号8字节,

optional 可选标识
repeated 集合标识


Lua声明协议结构
	todo 定义字段：
	    test(字段名) = protobuf_type.byte(字段类型)
	todo 定义字段集合：
		test_IsArray = true(集合标识)
		test(字段名) = protobuf_type.byte(字段类型)
	todo 定义结构体：
	    test(结构名) = {
		    protobuf_type.byte(字段类型)，
		    ...
	     }
	todo 定义结构体集合：
		test_IsArray = true(集合标识)
		test(结构名) = {
			protobuf_type.byte(字段类型)，
			...
		 }


字段上加#， 表示把此数据加入到数据库
message msg_1201
{
    //0=接收成功，1=请求数据，2=活动完成，3=活动进度值
	# 表示更新此字段
    optional byte state = 1;
}